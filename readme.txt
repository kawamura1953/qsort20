qsort20 は、従来のqsortよりも高速なソート関数です。　また、「安全」なソート関数です。

qsort20の特徴は、同じキー値(県名・男女など)が現れる場合に極めて高速なことです。
さらに、qsort20は、「安全性」を実現しています。
「安全性」の説明は、https://qiita.com/t-kawa/items/2bbcaf67030195ab3216 にあります。



言語Cの標準ライブラリのqsortと今回のqsort20の処理時間を
測定したものを以下に記載します。

```
----------------- benchmark.txt begin -------------------- 
 
　　キー:同値なし 要素:1万個　要素サイズ:8,20,80,1000byte 
my_qsort d=-3 e=10000 s=8 R4000 M000:000:000:0: c=136763  547054643 T=3.75   94 
qsort20  d=-3 e=10000 s=8 R4000 M120:580:000:0: c=128053  512215278 T=3.35   84 
 
my_qsort d=-3 e=10000 s=20 R3000 M000:000:000:0: c=136748  410244182 T=4.73  158 
qsort20  d=-3 e=10000 s=20 R3000 M120:580:000:0: c=128047  384143863 T=2.91   97 
 
my_qsort d=-3 e=10000 s=80 R3000 M000:000:000:0: c=136748  410244182 T=3.61  120 
qsort20  d=-3 e=10000 s=80 R3000 M120:580:000:0: c=128047  384143863 T=3.20  107 
 
my_qsort d=-3 e=10000 s=1000 R600 M000:000:000:0: c=136776   82066150 T=3.52  586 
qsort20  d=-3 e=10000 s=1000 R600 M120:580:000:0: c=128099   76859601 T=1.81  302 
 
　キー種別:100種　要素:1万個　要素サイズ:8,20,80,1000byte 
my_qsort d=100 e=10000 s=8 R6000 M000:000:000:0: c=62894   377366851 T=2.44   41 
qsort20  d=100 e=10000 s=8 R6000 M120:580:000:0: c=60879   365274761 T=2.33   39 
 
my_qsort d=100 e=10000 s=20 R3000 M000:000:000:0: c=62889   188668276 T=2.52   84 
qsort20  d=100 e=10000 s=20 R3000 M120:580:000:0: c=60876   182630302 T=1.33   44 
 
my_qsort d=100 e=10000 s=80 R4000 M000:000:000:0: c=62897   251590917 T=2.40   60 
qsort20  d=100 e=10000 s=80 R4000 M120:580:000:0: c=60876   243506842 T=2.05   51 
 
my_qsort d=100 e=10000 s=1000 R500 M000:000:000:0: c=62849    31424752 T=2.23  447 
qsort20  d=100 e=10000 s=1000 R500 M120:580:000:0: c=60902    30451152 T=1.25  250 
 
　　キー種別:2種　要素:1万個　要素サイズ:8,20,80,1000byte 
my_qsort d=2 e=10000 s=8 R30000 M000:000:000:0: c=15020   450617436 T=2.83    9 
qsort20  d=2 e=10000 s=8 R30000 M120:580:000:0: c=15053   451593912 T=2.42    8 
 
my_qsort d=2 e=10000 s=20 R13000 M000:000:000:0: c=15019   195259918 T=4.09   31 
qsort20  d=2 e=10000 s=20 R13000 M120:580:000:0: c=15053   195693623 T=1.22    9 
 
my_qsort d=2 e=10000 s=80 R12000 M000:000:000:0: c=15019   180239524 T=2.42   20 
qsort20  d=2 e=10000 s=80 R12000 M120:580:000:0: c=15053   180639004 T=1.22   10 
 
my_qsort d=2 e=10000 s=1000 R1200 M000:000:000:0: c=15020    18024163 T=3.02  251 
qsort20  d=2 e=10000 s=1000 R1200 M120:580:000:0: c=15083    18100535 T=0.89   74 
 
 
　 キー:同値なし　百～百万要素　要素サイズ:200byte 
my_qsort d=-3 e=100 s=200 R400000 M000:000:000:0: c=644     257805086 T=3.33    1 
qsort20  d=-3 e=100 s=200 R400000 M120:580:000:0: c=605     242260779 T=2.44    1 
 
my_qsort d=-3 e=1000 s=200 R28000 M000:000:000:0: c=10064   281797331 T=3.36   12 
qsort20  d=-3 e=1000 s=200 R28000 M120:580:000:0: c=9363    262184979 T=2.34    8 
 
my_qsort d=-3 e=10000 s=200 R2000 M000:000:000:0: c=136727  273455402 T=3.20  160 
qsort20  d=-3 e=10000 s=200 R2000 M120:580:000:0: c=128087  256175477 T=2.47  123 
 
my_qsort d=-3 e=100000 s=200 R120 M000:000:000:0: c=1729580  207549609 T=3.02 2512 
qsort20  d=-3 e=100000 s=200 R120 M120:580:000:0: c=1626701  195204126 T=2.77 2305 
 
my_qsort d=-3 e=1000000 s=200 R11 M000:000:000:0: c=20994830  230943134 T=3.37 30673 
qsort20  d=-3 e=1000000 s=200 R11 M120:580:000:0: c=19665760  216323369 T=3.09 28127 
 
=================  benchmark.txt end  ==================== 
my_qsort：ベンチマークテスト実行の計算機上の C ライブラリの qsort 
qsort20 ：今回公開した qsort20の qsort 
d=キー種類 (d=-3は、ユニーク乱数。d=kは、rand()%k でキーを算出。 
e=要素数 s=要素サイズ R繰返し回数 c=比較回数/R T=処理秒数 
各行の最後の数値がソート１回あたりの処理時間(10μ秒単位)です 
 
```



qsort20 のベンチマークテストの要領　１～３


１．https://github.com/kawamura1953/qsort20 からファイルをダウンロードする。



２．benchmark.sh を実行する。実行結果は benchmark.txt へ書き込まれる。

　　main_prog.c は benchmark.sh の中でコンパイル・実行される。
　　これの引数と出力の説明は、「３．」に記載。
    bench-sample.txt は benchmark.txt の例です。



３．ベンチマークテストを行うプログラム　main_prog.c

簡易な「ソートの正しさ検査」を行っている。正式な「ソートの正しさ検査」は別に実施している。
main_prog.c は次のパラメータを指定して実行する。


引数１　キー値の種類を指定する 0:定数 -1:昇順 -2:降順 -3:同値なし乱数 1:乱数 d>=2:乱数%d
引数２　配列の要素数
引数３　配列の要素サイズ(byte数)(4の倍数であること)(sqsort自体は任意のbyte数で動作します)
引数４　ソートの繰り返し回数（繰り返し毎に配列の要素のキー値は異なる）
引数５　_QS_MID1 の値 (-1のときは既定値を使用)
引数６　_QS_MID2 の値 (-1のときは既定値を使用)
引数７　_QS_MID3 の値 (-1のときは既定値を使用)
引数８　比較関数の重さを調整する数値。大きいほど比較関数が重たくなる。  


main_prog.c 1回の実行で、実行結果を1行出力する。1行は13項目ある。例と意味を次に示す。

    qs9i5         d=-3         e=10000     s=8       R10000      M300:300:8:0:
　プログラム名  キー値の種類  要素の個数  サイズ   繰り返し回数　引数５～８の値

    c=130260    1302608733    a=65855     658555016    i=196115   T=19.06   191  
　平均比較回数  全比較回数  平均代入回数  全代入回数  比較＋代入  処理秒数  平均時間(10μ秒単位)

これをstdoutに出力する。（前半の６つと最後の２つはstderrにも出力する）

「 平均代入回数  全代入回数  比較＋代入 」の3項目は、全代入回数>0 のときだけ出力する。
今回は必ず「全代入回数＝0」なので、この3項目の出力はない。

